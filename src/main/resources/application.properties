spring.application.name=DeliveryInventoryService

# ========= DB =========
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ========= JPA =========
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ========= JWT =========
jwt.private.key.path=${JWT_PRIVATE_KEY_PATH:classpath:keys/private_key.pem}
jwt.public.key.path=${JWT_PUBLIC_KEY_PATH:classpath:keys/public_key.pem}
jwt.expiration.in.millis=${JWT_EXPIRATION:1296000000}

# ========= Redis =========
spring.redis.host=${SPRING_REDIS_HOST}
spring.redis.port=${SPRING_REDIS_PORT}
spring.redis.username=${SPRING_REDIS_USERNAME}
spring.redis.password=${SPRING_REDIS_PASSWORD}
spring.redis.ssl=true
spring.redis.client-type=lettuce

# ========= Google API =========
google.api.key=${GOOGLE_API_KEY}

# ========= Elasticsearch =========
elasticsearch.url=${ELASTICSEARCH_URL}
elasticsearch.username=${ELASTICSEARCH_USERNAME}
elasticsearch.apiKey=${ELASTICSEARCH_API_KEY}

# ========= AWS S3 =========
cloud.aws.credentials.access.key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret.key=${AWS_SECRET_KEY}
cloud.aws.region.static=${AWS_REGION}
cloud.aws.s3.bucket.name=${AWS_BUCKET_NAME}

# ========= Kafka =========
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}
kafka.sasl.username=${KAFKA_SASL_USERNAME}
kafka.sasl.password=${KAFKA_SASL_PASSWORD}
kafka.jaas.template=${KAFKA_JAAS_TEMPLATE}
kafka.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}

# ========= Cloudinary =========
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# ========= Hibernate Logging =========
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ========= Cron =========
myapp.cron.batch_order_from_city_and_assign_to_rider=${CRON_BATCH_ORDER}
